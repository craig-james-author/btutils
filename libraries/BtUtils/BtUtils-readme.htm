<html>
<head>
  <title>BtUtils - BareTouch board utilities</title>
  <style>
    body {font-family:  "Helvetica Neue", Helvetica, Arial, sans-serif; color: #333333;}
    h1 {font-size: 1.2 em; font-weight: bold; text-align: center;}
    h2 {font-size: 1.1 em; font-weight: bold; border-bottom: 1px solid grey;}
    .func {font-weight: bold; font-family: "Courier New"; margin-top: 1em;}
    .desc {margin-left: 2em; margin-top: 1em;}
    .example {margin-left: 5em; font-family: "Courier New"; white-space: pre; font-size: 0.9em;}
    .code {font-family: "Courier New";}
  </style>
</head>
<body>

<h1>BareConductive Touch Board Utility Functions</h1>
<div style="font-size: 0.8em; text-align: center;">
  Author: Craig James
</div>


<h2>Introduction</h2>
<p>
  These functions "wrap" the complexity of the BareConductive Touch
  Board<sup>&trade;</sup> into a simple, easy-to-understand set of
  functions.
</p>

<p>
  The TouchBoard comes with a number of example Arduino sketches that are
  very helpful, but they are "low level" code that is complex and
  inscrutable to those not "versed in the art" of C++ programming. This
  BtUtils library provides a simplified "wrapper" for the TouchBoard
  functionality with the hope of making the technology more accessible to
  non-programmers.
</p>

<p>The key features provided by the BtUtils library are:
  <ul>
    <li>Simplified volume control.</li>
    <li>Simplified method for checking the touch sensors.</li>
    <li>Simplified method for starting and stopping audio tracks, and
      checking their status</li>
    <li>Volume fade-in/fade-out.</li>
    <li>
  </ul>
</p>

<p>
  <b>NOTE:</b> The TouchBoard has limited memory (32K), and this library
  uses a lot of that space. Complex sketches, when combined with this
  library, often exceed the available memory. There are several directives
  in the <code>BtUtils.h</code> that allow you to disable certain features
  that you might not need, thereby saving space.
</p>


<p>
  A complete working example: File <span class="code">TemplateSetup.ino</span>
</p>

<div class="example">
#include "BtUtils.h"
#include &lt;MPR121.h&gt;
#include &lt;Wire.h&gt;
#include &lt;SPI.h&gt;
#include &lt;SdFat.h&gt;
#include &lt;FreeStack.h&gt;
#include &lt;SFEMP3Shield.h&gt;

SdFat sd;
SFEMP3Shield MP3player;

BtUtils *bt;

void setup() {

  // This setup code must always be called. Leave it exactly like this in
  // all of your "sketches".

  bt = BtUtils::setup(&amp;sd, &amp;MP3player);

  // Set the output volume. This ranges from zero (silent) to 100 (full
  // volume).  The default is 100 (i.e. if you don't call this function at
  // all, the volume will be 100%).

  bt-&gt;setVolume(100);

  // Set the fade-in time in milliseconds (e.g. 1000 is 1 second). When a
  // track is started, the volume is initially zero, and it takes this much
  // time to reach the volume. Note that whatever you set the volume to
  // (see above) is the target that the fade-in is heading for in the
  // specified time.

  bt-&gt;setFadeInTime(1000);    // 1 second fade-in

  // Same for the fade-out time.

  bt-&gt;setFadeOutTime(2000);   // 2 second fade-out

  // Set the delay time in milliseconds (e.g. 1000 is 1 second). When a
  // track is started, the actual sound won't start until this time has
  // elapsed.

  bt-&gt;setStartDelay(1500);


  // This sets an "idle timeout" -- if nothing hapens for this length of
  // time, it clears out the resume feature so that the next time you call
  // bt-&gt;resume(), it will start the track over instead.  The timeout is
  // in seconds.

  bt-&gt;startOverAfterNoTouchTime(10);

  // Set the touch sensitivity. Low values make it very sensitive (i.e. it
  // will trigger a touch even when your hand is nearby), and high valuse
  // make it less sensitive (i.e. you have to actually touch the contact).
  // The first number is touch, the second number is release. Touch <i>must</i>
  // be greater than release.

  bt-&gt;setTouchReleaseThreshold(40, 20);

}

void loop() {
  int trackNumber;
  int touchStatus = bt-&gt;getPinTouchStatus(&amp;trackNumber);
  if (touchStatus = NEW_TOUCH) {
    int lastPlayed  = bt-&gt;getLastTrackPlayed();
    if (bt-&gt;getPlayerStatus() == IS_PAUSED && trackNumber == lastPlayed) {
      bt-&gt;resumeTrack();
    } else {
      bt-&gt;startTrack(trackNumber);
    }
  }
  else if (touchStatus == NEW_RELEASE) {
    bt-&gt;pauseTrack();
  } 
}
</div>

<h2>Touch/Release functions:</h2>

<div class="func">bt-&gt;getPinTouchStatus(int *whichTrack)</div>
<div class="desc">
  Was a pin touched or released? Returns:
  <ul>
    <li><span class="code">TOUCH_NO_CHANGE</span> - nothing happened since the last time this was checked</li>
    <li><span class="code">NEW_TOUCH</span> - a new pin was touched</li>
    <li><span class="code">NEW_RELEASE</span> - a pin was released</li>
  </ul>
</div>
<div class="desc">
  Also returns which track was selected in the "whichTrack" variable you pass in.
</div>
<div class="desc">
  Example:
</div>
<div class="example">
  int whichTrack;
  int touchStatus = bt-&gt;getPinTouchStatus(&whichTrack);
  if (touchStatus == NEW_TOUCH) {
    bt-&gt;startTrack(whichTrack);
  } else if (touchStatus == NEW_RELEASE) {
    bt-&gt;stopTrack();
  }
</div>

<div class="func">bt-&gt;setTouchReleaseThreshold(touchThreshold, releaseThreshold)</div>
<div class="desc">
  How sensitive are the touch pins? High numbers are less sensitive, low
  numbers are more sensitive. For example:
</div>
<div class="example">
  bt-&gt;setTouchReleaseThreshold(40, 20);  // useful for touch/release sensing
  bt-&gt;setTouchReleaseThreshold(2, 4);    // useful for proximity sensing
</div>
<div class="desc">
  Note that touchThreshold MUST be greater than releaseThreshold. Valid
  threshold values are 0-255.
</div>
<div class="desc">
  The default is 40 for touch, 20 for release.
</div>

<h2>Control the player:</h2>

<div class="func">bt-&gt;startTrack(trackNumber)</div>
<div class="desc">
  Starts a track playing. Normally the sound starts immediately; see
  <span class="code">setFadeInTime()</span> below to have the sound increase
  gradually rather than immediately.
</div>


<div class="func">bt-&gt;pauseTrack()</div>
<div class="desc">
  Pauses the track currently playing.
</div>


<div class="func">bt-&gt;resumeTrack()</div>
<div class="desc">
  Resumes playing the last track that was paused with <span class="code">pauseTrack()</span>, above.
  If there was no track paused, starts playing track 0.
</div>

<div class="func">bt-&gt;stopTrack()</div>
<div class="desc">
  Stops the current track. Has no effect if nothing is playing.
</div>
<div class="desc">
  If a fade-out time has been specified (see <span class="code">setFadeOutTime()</span>), the track
  will continue playing during the fade-out period, but during the fade-out
  period <span class="code">getPlayerStatus</span> (see below) will return IS_STOPPED.
</div>

<div class="func">bt-&gt;queueTrackToStartAfterDelay(int trackNumber)</div>
<div class="desc">
  Queues a track that will be started after a delay. This like calling startTrack (above), but the
  track won't actually start until the start-delay time you've set expires. See
  <span class="code">setStartDelay()</span>, below.
</div>

<div class="func">bt-&gt;setStartDelay(milliseconds)</div>
<div class="desc">
  Specifies how long to wait (in milliseconds) before a queued track begins
  playing (see <span class="code">queueTrackToStartAfterDelay()</span>, above). This only needs to be
  called once, for example, in the <span class="code">setup()</span> function of an Arduino program.
</div>

<div class="func">bt-&gt;getPlayerStatus()</div>
<div class="desc">
  What is the player doing right now?
  <ul>
    <li><span class="code">IS_STOPPED</span> - nothing currently playing or queued</li>
    <li><span class="code">IS_PLAYING</span> - a track is playing</li>
    <li><span class="code">IS_PAUSED</span> - a track was started then paused</li>
    <li><span class="code">IS_WAITING</span> - a track was queued, but the start-delay time hasn't
    been reached yet.</li>
  </ul>

  Note that if a fade-out period has been
  specified, <span class="code">IS_STOPPED</span> will be returned immediately
  after <span class="code">stopTrack</span> is called even during the fade-out
  period.

</div>

<div class="func">bt-&gt;startOverAfterNoTouchTime(int seconds)</div>
<div class="desc">
  If there is no activity for this length of time, resets
  the <span class="code">resumeTrack()</span> feature so that the next touch
  will start playing from the beginning of the track rather than resuming. The
  idea is that when there's a long gap in activity, it's probably a different
  person, so we should start fresh.
</div>
<div class="desc">
  The default is -1, which disables this feature
  (<span class="code">resumeTrack()</span> always resumes, even after a long
  period of no activity).
</div>

<div class="func">bt-&gt;getLastTrackPlayed()</div>
<div class="desc">
  Returns the last track played; if you resume, this is what it will play.
</div>



<h2>Volume Control and Fade In/Out:</h2>

<div class="func">bt-&gt;setVolume(percent)</div>
<div class="desc">
  Sets the volume from 0 to 100%. Note that the BareTouch board has a very
  wide volume range, and generally a volume less than 50 is
  inaudible. Default is 100 (full volume).
</div>

<div class="func">bt-&gt;setFadeInTime(milliseconds)</div>
<div class="desc">
  Specifies the time (milliseconds) until volume reaches the set value
  after a track is started. Default is zero (track starts at full specified
  volume). This only needs to be called once, for example, in the <span class="code">setup()</span>
  function of an Arduino program.
</div>

<div class="func">bt-&gt;setFadeOutTime(milliseconds)</div>
<div class="desc">
  Specifies the time (milliseconds) until the volume reaches zero after a
  track is stopped. Default is zero (track stops playing immediately when
  stopTrack is called). This only needs to be called once, for example, in
  the <span class="code">setup()</span> function of an Arduino program.
</div>

<h2>Proximity Sensing:</h2>

<div class="func">bt-&gt;setProximitySensingMode()</div>
<div class="desc">
  If you intend to use proximity sensing, you should call this function
  once in your <span class="code">setup()</span> function. This function
  changes the characteristics of the TouchBoard to make sensing more
  reliable. (Technically, it reduces the effects of a low-pass filter so
  that slow hand motions are detected more reliably.)
</div>

<div class="func">bt-&gt;getProximityPercent()</div>
<div class="desc">
  Returns 0 (far away) to 100 (very close) The sensor's concept of "far"
  seems to be anything more than 1/2 inch or so, so your finger has to get
  pretty close before a proximity greater than zero is returned.
</div>


<h2>Bookkeeping task:</h2>

<div class="func">bt-&gt;doTimerTasks()</div>
<div class="desc">
  Timer tasks. If you're using the fade-in/fade-out feature, or if you're
  using the queue-track feature, you should call this function every time
  through the loop.
</div>

<h2>Handy utility functions:</h2>

<div class="func">bt-&gt;log_action(char *msg, int track)</div>
<div class="desc">
  Handy utility: prints the message followed by the track number.
  <i>(Note: you can also use the
  standard <span class="code">Serial.print</span>
  and <span class="code">Serial.println</span> just as in any Arduino
  sketch. This function is merely for convenience for simple logging.)</i>
</div>

<div class="func">bt-&gt;void turnLedOn()</div>
<div class="desc">
  Handy utility: turn the built-in LED on.
</div>

<div class="func">bt-&gt;void turnLedOff()</div>
<div class="desc">
  Handy utility: turn the built-in LED off.
</div>

<h2>Copyright</h2>

<p>Copyright &copy; 2019-2022, Craig A. James</p>

<p>Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:</p>

<p>The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.</p>

<p>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.</p>

